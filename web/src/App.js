import React, { useState, useRef, useEffect } from "react";
import "./App.css";
import robot from "./robot.svg";
import PhoneMockup from "./assets/Phone_Mockup.png";
// Importing images for the infographic (I have to do this individually, the looping I was doing was not working
import png1 from "./assets/1.png";
import png2 from "./assets/2.png";
import png3 from "./assets/3.png";
import png4 from "./assets/4.png";
import png5 from "./assets/5.png";
import png6 from "./assets/6.png";
import png7 from "./assets/7.png";
import png8 from "./assets/8.png";
const App = () => {
  const homeRef = useRef(null);
  const aboutRef = useRef(null);
  const contactRef = useRef(null);

  const [activeButton, setActiveButton] = useState(null);
  const [openQuestions, setOpenQuestions] = useState([]);

  const handleButtonClick = (buttonName) => {
    setActiveButton(buttonName);
  };

  const scrollToHome = () => {
    if (homeRef.current) {
      homeRef.current.scrollIntoView({ behavior: "smooth" });
    }
    handleButtonClick("home");
  };

  const scrollToAbout = () => {
    if (aboutRef.current) {
      aboutRef.current.scrollIntoView({ behavior: "smooth" });
    }
    handleButtonClick("about");
  };

  const scrollToContact = () => {
    if (contactRef.current) {
      contactRef.current.scrollIntoView({ behavior: "smooth" });
    }
    handleButtonClick("contact");
  };

  const toggleQuestion = (question) => {
    setOpenQuestions((prevQuestions) => {
      if (prevQuestions.includes(question)) {
        // If the question is already open, close it
        return prevQuestions.filter((q) => q !== question);
      } else {
        // If the question is closed, open it
        return [...prevQuestions, question];
      }
    });
  };

  const faqData = [
    {
      question: "What is TeleQuest?",
      answer:
        "TeleQuest is a Telegram bot designed to enhance information retrieval within group chats. It utilizes advanced technologies such as message embeddings and semantic search to provide relevant historical context within a Telegram group.",
    },
    {
      question: "How does the bot retrieve information?",
      answer:
        "The bot retrieves information by converting both historical and new messages in a Telegram group into vector embeddings. When a user asks a question, the bot compares the question's embedding against stored embeddings, identifies potential answers based on semantic similarity, and refines the response using a language model like GPT before providing the information back to the user in the group.",
    },
    {
      question: "Can it understand informal language and abbreviations?",
      answer:
        "Yes, TeleQuest is designed to understand informal language and abbreviations. Its language model, including the use of GPT, allows it to comprehend and respond effectively to colloquial expressions, informal language, and commonly used abbreviations within the context of the Telegram group conversations.",
    },
    {
      question: "What kind of data does it store?",
      answer:
        "TeleQuest stores various types of data to facilitate information retrieval within a Telegram group. It stores raw message data, including message ID, sender ID, timestamp, content, and GPT-generated categories, in MongoDB. Additionally, it stores semantic representations of messages (embeddings) in the Vector Database, enabling efficient semantic search for relevant historical context.",
    },
    {
      question: "What happens if the bot doesn't find relevant information?",
      answer:
        "If the bot doesn't find relevant information based on the semantic search of stored embeddings, it may respond indicating that it couldn't locate a suitable answer.",
    },
    {
      question: "What happens when TeleQuest is added to a group?",
      answer:
        "Upon being added to a group, TeleQuest starts processing all historical messages, converting them into vector embeddings.",
    },
    {
      question: "What is the structure of the databases used by TeleQuest?",
      answer:
        "TeleQuest uses two databases: MongoDB for storing message metadata and Pinecone as a Vector Database for storing message embeddings. Each Telegram group corresponds to a unique collection in both databases, ensuring organization and efficiency in data retrieval.",
    },
    {
      question: "How are messages categorized in TeleQuest?",
      answer:
        "As the bot reads messages, it sends each message to GPT for categorization based on content. These categories, generated by GPT, are stored in MongoDB and contribute to more precise semantic searches in the future.",
    },
    {
      question: "How can I integrate TeleQuest into my Telegram group?",
      answer:
        "To integrate TELEQUEST into your Telegram group, simply add the bot to the group, and it will automatically start processing historical messages and providing enhanced information retrieval capabilities.",
    },
  ];

  useEffect(() => {
    // Scroll to homeRef when the component mounts
    scrollToHome(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return (
    <div className="container">
      <div className="home-container" ref={homeRef}>
        <nav className="buttons-container">
          <button
            className={`buttons${activeButton === "home" ? " active" : ""}`}
            onClick={scrollToHome}
          >
            Home
          </button>
          <button
            className={`buttons${activeButton === "about" ? " active" : ""}`}
            onClick={scrollToAbout}
          >
            About
          </button>
          <button
            className={`buttons${activeButton === "contact" ? " active" : ""}`}
            onClick={scrollToContact}
          >
            Contact
          </button>
        </nav>

        <main>
          <header>
            <section className="main-content">
              <h1 className="title">TeleQuest</h1>
              <div className="tagline">
                <h3 className="pitchLeft">A unique answer</h3>
                <h3 className="pitchRight">to the same questions.</h3>
              </div>

              <h2 className="greatPitch">
                <br />
                <br />
                Great for large Telegram** groups
              </h2>
              <h4 className="button-start">
                <button className="filled" onClick={scrollToAbout}>
                  Get Started
                </button>
              </h4>
              <h5 className="exclusiveMessage">
                **Exclusively available through Telegram
              </h5>
            </section>
          </header>
          <div className="illustration">
            <img src={robot} alt="Chatbot Illustration" />
          </div>
        </main>
      </div>

      {/* AboutPage Section */}

      <div className="about-container" ref={aboutRef}>
        <div className="about-image-container">
          <img src={PhoneMockup} alt="Mockup" />
        </div>
        <div className="about-text-container">
          <p className="about-text">
            Simply start or tag questions with /q and TeleQuest will find the
            answer for you!
          </p>
        </div>
      </div>
      {/* Video Walkthrough Section */}
      <div className="video-container">
        <div className="video-heading">
          <h2>How do we use it?</h2>
        </div>
        <div className="video-wrapper">
          <iframe
            width="560"
            height="315"
            src="https://www.youtube.com/embed/nhFX_kwDcyE?si=BegLNpZvhjTSEt9w"
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowfullscreen
          ></iframe>
        </div>
      </div>
      {/* Infographic Section */}
      <div className="infographic-container">
        <div className="infographic-heading">
          <h2>How does it work?</h2>
        </div>
        {/* step 1 */}
        <div className="infographic_picleft">
          <div className="infographic_img">
            <div className="infographic_img-image">
              <img src={png1} alt="1" />
            </div>
          </div>
          <div className="infographic-text-container">
            <h2 className="infographic-step-heading">
              TeleQuest joins the group
            </h2>
            <p className="infographic-step-description">
              The group chat owner adds the bot, allowing “Admin Rights” in the
              chat.
            </p>
          </div>
        </div>
        {/* step 2 */}
        <div className="infographic_picright">
          <div className="infographic-text-container">
            <h2 className="infographic-step-heading">
              TeleQuest reads all the messages
            </h2>
            <p className="infographic-step-description">
              For the bot to find answers, it learns from the conversations
              you’ve already had! TeleQuest reads messages sent before and after
              it is added, learning the most recent and detailed context to
              answer your questions.
            </p>
          </div>
          <div className="infographic_img">
            <img src={png2} alt="2" />
          </div>
        </div>
        {/* step 3 */}
        <div className="infographic_picleft">
          <div className="infographic_img">
            <div className="infographic_img-image">
              <img src={png3} alt="3" />
            </div>
          </div>
          <div className="infographic-text-container">
            <h2 className="infographic-step-heading">
              Messages are converted to embeddings{" "}
            </h2>
            <p className="infographic-step-description">
              Think of embeddings like the bot translating your message to a
              language it can understand – the bot converts all messages to
              embeddings and uses them to answering questions.
            </p>
          </div>
        </div>
      </div>
      {/* step 4 */}
      <div className="infographic_picright">
        <div className="infographic-text-container">
          <h2 className="infographic-step-heading">
            TeleQuest stores message embeddings and metadata, never user
            information.
          </h2>
          <p className="infographic-step-description">
            The bot stores information in two databases: one for the vector
            embeddings of messages, and another to store the metadata of each
            message. The message itself is never kept.
          </p>
        </div>
        <div className="infographic_img">
          <img src={png4} alt="4" />
        </div>
      </div>

      {/* step 5 */}
      <div className="infographic_picleft">
        <div className="infographic_img">
          <div className="infographic_img-image">
            <img src={png5} alt="5" />
          </div>
        </div>
        <div className="infographic-text-container">
          <h2 className="infographic-step-heading">
            Someone in chat asks a question!{" "}
          </h2>
          <p className="infographic-step-description">
            Using /q, TeleQuest can be summoned when someone asks a question.
            The bot will then create an embedding of the question.
          </p>
        </div>
      </div>
      {/* step 6 */}
      <div className="infographic_picright">
        <div className="infographic-text-container">
          <h2 className="infographic-step-heading">
            TeleQuest compares the question embedding with the database.{" "}
          </h2>
          <p className="infographic-step-description">
            The bot then compares the question embedding to the other message
            embeddings in its database and finds a semantic match to answer the
            question. If it doesn’t find one, it admits not knowing the answer.
          </p>
        </div>
        <div className="infographic_img">
          <img src={png6} alt="6" />
        </div>
      </div>
      {/* step 7 */}
      <div className="infographic_picleft">
        <div className="infographic_img">
          <div className="infographic_img-image">
            <img src={png7} alt="7" />
          </div>
        </div>
        <div className="infographic-text-container">
          <h2 className="infographic-step-heading">
            TeleQuest uses GPT to refine the response.{" "}
          </h2>
          <p className="infographic-step-description">
            Now that the bot has an answer, it translates it back to the human
            language with GPT.
          </p>
        </div>
      </div>
      {/* step 8 */}
      <div className="infographic_picright">
        <div className="infographic-text-container">
          <h2 className="infographic-step-heading">
            TeleQuest texts you back with an answer to your question!{" "}
          </h2>
          <p className="infographic-step-description">
            After all that translating and thinking, the bot sends a message in
            the group chat answering your question!{" "}
          </p>
        </div>
        <div className="infographic_img">
          <img src={png8} alt="8" />
        </div>
      </div>

      {/* FAQ Section */}

      <div className="faq-section">
        <h2 className="faq-title">FAQs:</h2>
        <div className="faq-container">
          {faqData.map((faqItem, index) => (
            <div key={index} className="faq-item">
              <button
                className="faq-question"
                onClick={() => toggleQuestion(faqItem.question)}
              >
                {faqItem.question}
              </button>
              {openQuestions.includes(faqItem.question) && (
                <p className="faq-answer">{faqItem.answer}</p>
              )}
            </div>
          ))}
        </div>
      </div>
      {/* Privacy Statement Section */}
      <div className="privacy-container">
        <h2 className="privacy-title">Privacy Statement</h2>
        <p className="privacy-text">
          🌟 Understanding Your Privacy with Our Bot:
        </p>
        <p className="privacy-text">
          <b>Respecting Group Chat Integrity:</b> Our bot operates exclusively
          within the confines of group chats. It is designed to ensure that
          personal information and chat content do not extend beyond these
          interactions. This approach significantly mitigates the risk of
          personal data exposure.
        </p>
        <p className="privacy-text">
          <b>Intelligent Assistance Without Intrusion:</b> The primary goal of
          our bot is to provide intelligent and relevant responses to your
          queries. We do not store your chat messages. Instead, we retain only
          essential non-personal information necessary for enhancing the bot's
          understanding and efficiency.
        </p>
        <p className="privacy-text">
          <b>Robust Data Security:</b> Any data that we do collect is securely
          safeguarded on MongoDB cloud servers. We prioritize the security of
          the data to ensure its confidentiality and integrity.
        </p>
        <p className="privacy-text">
          <b>Collecting Only What's Necessary:</b> We are committed to
          maintaining a minimal data footprint. The bot stores only
          indispensable data, such as message types and topics, to facilitate
          effective assistance. Personal identifiers and specific chat content
          are not retained.
        </p>
        <p className="privacy-text">
          <b>Commitment to Privacy:</b> Our presence in your group chat is
          focused on providing assistance, not monitoring personal
          conversations. We respect the privacy of your discussions and are
          dedicated to making your interaction with the bot both beneficial and
          secure.
        </p>
        <p className="privacy-text">
          By utilizing our bot, you acknowledge and consent to these privacy
          practices. We are dedicated to enhancing your experience while
          upholding the utmost respect for your privacy.
        </p>
      </div>

      {/* Contact Section */}
      <div className="contact-container" ref={contactRef}>
        <p className="greatPitch">Contact</p>
        <p className="contact-description">
          TeleQuest was made in compliance of our CS162 Software Development
          course final assignment – an exhibition of our learned skills during
          Fall 2023. Every bit of its code, a blend of our creativity and
          ChatGPT's guidance, is available for to explore in the TeleQuest
          repository on GitHub. Reach out to us for insights, queries, or just
          to share your thoughts on our journey!
        </p>
      </div>
    </div>
  );
};

export default App;
